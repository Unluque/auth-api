openapi: 3.0.0
info:
  title: Authentication API
  version: 1.0.0
  description: API for user authentication, registration, session management, and verification.
servers:
  - url: http://localhost:3000/api
    description: Local Development Server
tags:
  - name: Authentication
    description: User login, logout, and session management
  - name: Registration
    description: User registration and account verification
paths:
  /api/register:
    post:
      summary: Register a new user
      tags:
        - Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - confirmationPassword
              properties:
                username:
                  type: string
                  description: User's chosen username
                  example: johndoe
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  description: User's password (min 8 characters, at least one uppercase, one lowercase, one number, one special character)
                  example: StrongP@ssw0rd
                confirmationPassword:
                  type: string
                  format: password
                  description: Confirmation of the user's password
                  example: StrongP@ssw0rd
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully. Verify your account with the provided token.
                  verification_token:
                    type: string
                    example: 123e4567-e89b-12d3-a456-426614174000
        '400':
          description: Bad Request (e.g., missing fields, invalid email, passwords mismatch, unsafe password)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '409':
          description: Conflict (email already in use)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /api/verify/refresh-token:
    post:
      summary: Verify user account with a token
      tags:
        - Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: Verification token received via email
                  example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Account verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Account verified successfully
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad Request (invalid or missing token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '404':
          description: Not Found (token not associated with any user)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '410':
          description: Gone (verification token has expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /api/verify/access-token:
    post:
      summary: Validate an access token
      tags:
        - Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: Access token to validate
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Access token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access token is valid
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 60f7e7e7e7e7e7e7e7e7e7e7
                      username:
                        type: string
                        example: johndoe
                      email:
                        type: string
                        example: john.doe@example.com
        '401':
          description: Unauthorized (token expired or invalid)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /api/login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  description: User's password
                  example: StrongP@ssw0rd
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad Request (email and password are required)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized (incorrect email or password)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '403':
          description: Forbidden (account not verified yet)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /api/logout:
    post:
      summary: User logout
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: Refresh token to invalidate
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout successful
        '400':
          description: Bad Request (refresh token required)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '404':
          description: Not Found (refresh token not found)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /api/session/refresh-token:
    post:
      summary: Refresh access token using a refresh token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: Refresh token to generate a new access token
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: New access token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Unauthorized (refresh token required)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '403':
          description: Forbidden (invalid or expired refresh token, or user not found)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

components:
  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: string
          example: 60f7e7e7e7e7e7e7e7e7e7e7
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john.doe@example.com
    RefreshToken:
      type: object
      properties:
        user:
          type: string
          example: 60f7e7e7e7e7e7e7e7e7e7e7
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        createdAt:
          type: string
          format: date-time
          example: 2023-10-27T10:00:00Z